{"ast":null,"code":"import*as React from'react';import NavigationContext from\"./NavigationContext\";export default function useFocusEvents(_ref){var state=_ref.state,emitter=_ref.emitter;var navigation=React.useContext(NavigationContext);var lastFocusedKeyRef=React.useRef();var currentFocusedKey=state.routes[state.index].key;React.useEffect(function(){return navigation===null||navigation===void 0?void 0:navigation.addListener('focus',function(){lastFocusedKeyRef.current=currentFocusedKey;emitter.emit({type:'focus',target:currentFocusedKey});});},[currentFocusedKey,emitter,navigation]);React.useEffect(function(){return navigation===null||navigation===void 0?void 0:navigation.addListener('blur',function(){lastFocusedKeyRef.current=undefined;emitter.emit({type:'blur',target:currentFocusedKey});});},[currentFocusedKey,emitter,navigation]);React.useEffect(function(){var lastFocusedKey=lastFocusedKeyRef.current;lastFocusedKeyRef.current=currentFocusedKey;if(lastFocusedKey===undefined&&!navigation){emitter.emit({type:'focus',target:currentFocusedKey});}if(lastFocusedKey===currentFocusedKey||!(navigation?navigation.isFocused():true)){return;}if(lastFocusedKey===undefined){return;}emitter.emit({type:'blur',target:lastFocusedKey});emitter.emit({type:'focus',target:currentFocusedKey});},[currentFocusedKey,emitter,navigation]);}","map":{"version":3,"names":["React","NavigationContext","useFocusEvents","_ref","state","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"sources":["C:\\Users\\ACER\\Desktop\\Nouveau dossier\\signal-clone\\node_modules\\@react-navigation\\core\\src\\useFocusEvents.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"],"mappings":"AACA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B,MAAO,CAAAC,iBAAiB,2BAYxB,cAAe,SAAS,CAAAC,cAAcA,CAAAC,IAAA,CAGnB,IAFjB,CAAAC,KAAK,CAEUD,IAAA,CAFfC,KAAK,CACLC,OAAA,CACeF,IAAA,CADfE,OAAA,CAEA,GAAM,CAAAC,UAAU,CAAGN,KAAK,CAACO,UAAU,CAACN,iBAAiB,CAAC,CACtD,GAAM,CAAAO,iBAAiB,CAAGR,KAAK,CAACS,MAAM,EAAsB,CAE5D,GAAM,CAAAC,iBAAiB,CAAGN,KAAK,CAACO,MAAM,CAACP,KAAK,CAACQ,KAAK,CAAC,CAACC,GAAG,CAIvDb,KAAK,CAACc,SAAS,CACb,iBACE,CAAAR,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAES,WAAW,CAAC,OAAO,CAAE,UAAM,CACrCP,iBAAiB,CAACQ,OAAO,CAAGN,iBAAiB,CAC7CL,OAAO,CAACY,IAAI,CAAC,CAAEC,IAAI,CAAE,OAAO,CAAEC,MAAM,CAAET,iBAAkB,CAAC,CAAC,CAC5D,CAAC,CAAC,GACJ,CAACA,iBAAiB,CAAEL,OAAO,CAAEC,UAAU,CAAC,CACzC,CAEDN,KAAK,CAACc,SAAS,CACb,iBACE,CAAAR,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAES,WAAW,CAAC,MAAM,CAAE,UAAM,CACpCP,iBAAiB,CAACQ,OAAO,CAAGI,SAAS,CACrCf,OAAO,CAACY,IAAI,CAAC,CAAEC,IAAI,CAAE,MAAM,CAAEC,MAAM,CAAET,iBAAkB,CAAC,CAAC,CAC3D,CAAC,CAAC,GACJ,CAACA,iBAAiB,CAAEL,OAAO,CAAEC,UAAU,CAAC,CACzC,CAEDN,KAAK,CAACc,SAAS,CAAC,UAAM,CACpB,GAAM,CAAAO,cAAc,CAAGb,iBAAiB,CAACQ,OAAO,CAEhDR,iBAAiB,CAACQ,OAAO,CAAGN,iBAAiB,CAI7C,GAAIW,cAAc,GAAKD,SAAS,EAAI,CAACd,UAAU,CAAE,CAC/CD,OAAO,CAACY,IAAI,CAAC,CAAEC,IAAI,CAAE,OAAO,CAAEC,MAAM,CAAET,iBAAkB,CAAC,CAAC,CAC5D,CAIA,GACEW,cAAc,GAAKX,iBAAiB,EACpC,EAAEJ,UAAU,CAAGA,UAAU,CAACgB,SAAS,EAAE,CAAG,IAAI,CAAC,CAC7C,CACA,OACF,CAEA,GAAID,cAAc,GAAKD,SAAS,CAAE,CAEhC,OACF,CAEAf,OAAO,CAACY,IAAI,CAAC,CAAEC,IAAI,CAAE,MAAM,CAAEC,MAAM,CAAEE,cAAe,CAAC,CAAC,CACtDhB,OAAO,CAACY,IAAI,CAAC,CAAEC,IAAI,CAAE,OAAO,CAAEC,MAAM,CAAET,iBAAkB,CAAC,CAAC,CAC5D,CAAC,CAAE,CAACA,iBAAiB,CAAEL,OAAO,CAAEC,UAAU,CAAC,CAAC,CAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}