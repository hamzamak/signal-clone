{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useFocusedListenersChildrenAdapter(_ref){var navigation=_ref.navigation,focusedListeners=_ref.focusedListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addListener=_React$useContext.addListener;var listener=React.useCallback(function(callback){if(navigation.isFocused()){for(var _listener of focusedListeners){var _listener2=_listener(callback),handled=_listener2.handled,result=_listener2.result;if(handled){return{handled:handled,result:result};}}return{handled:true,result:callback(navigation)};}else{return{handled:false,result:null};}},[focusedListeners,navigation]);React.useEffect(function(){return addListener===null||addListener===void 0?void 0:addListener('focus',listener);},[addListener,listener]);}","map":{"version":3,"names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","_ref","navigation","focusedListeners","_React$useContext","useContext","addListener","listener","useCallback","callback","isFocused","_listener2","handled","result","useEffect"],"sources":["C:\\Users\\ACER\\Desktop\\Nouveau dossier\\signal-clone\\node_modules\\@react-navigation\\core\\src\\useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"],"mappings":"AACA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B,MAAO,CAAAC,wBAAwB,kCAc/B,cAAe,SAAS,CAAAC,kCAAkCA,CAAAC,IAAA,CAG9C,IAFV,CAAAC,UAAU,CAEFD,IAAA,CAFRC,UAAU,CACVC,gBAAA,CACQF,IAAA,CADRE,gBAAA,CAEA,IAAAC,iBAAA,CAAwBN,KAAK,CAACO,UAAU,CAACN,wBAAwB,CAAC,CAA1DO,WAAA,CAAAF,iBAAA,CAAAE,WAAA,CAER,GAAM,CAAAC,QAAQ,CAAGT,KAAK,CAACU,WAAW,CAC/B,SAAAC,QAAwC,CAAK,CAC5C,GAAIP,UAAU,CAACQ,SAAS,EAAE,CAAE,CAC1B,IAAK,GAAM,CAAAH,SAAQ,GAAI,CAAAJ,gBAAgB,CAAE,CACvC,IAAAQ,UAAA,CAA4BJ,SAAQ,CAACE,QAAQ,CAAC,CAAtCG,OAAO,CAAAD,UAAA,CAAPC,OAAO,CAAEC,MAAA,CAAAF,UAAA,CAAAE,MAAA,CAEjB,GAAID,OAAO,CAAE,CACX,MAAO,CAAEA,OAAO,CAAPA,OAAO,CAAEC,MAAA,CAAAA,MAAO,CAAC,CAC5B,CACF,CAEA,MAAO,CAAED,OAAO,CAAE,IAAI,CAAEC,MAAM,CAAEJ,QAAQ,CAACP,UAAU,CAAE,CAAC,CACxD,CAAC,IAAM,CACL,MAAO,CAAEU,OAAO,CAAE,KAAK,CAAEC,MAAM,CAAE,IAAK,CAAC,CACzC,CACF,CAAC,CACD,CAACV,gBAAgB,CAAED,UAAU,CAAC,CAC/B,CAEDJ,KAAK,CAACgB,SAAS,CACb,iBAAM,CAAAR,WAAW,SAAXA,WAAW,iBAAXA,WAAW,CAAG,OAAO,CAAEC,QAAQ,CAAC,GACtC,CAACD,WAAW,CAAEC,QAAQ,CAAC,CACxB,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}