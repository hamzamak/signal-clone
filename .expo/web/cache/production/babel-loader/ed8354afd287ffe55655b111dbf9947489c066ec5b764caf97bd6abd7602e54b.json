{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import useNavigation from\"./useNavigation\";export default function useNavigationState(selector){var navigation=useNavigation();var _React$useState=React.useState(function(){return selector(navigation.getState());}),_React$useState2=_slicedToArray(_React$useState,2),setResult=_React$useState2[1];var selectorRef=React.useRef(selector);React.useEffect(function(){selectorRef.current=selector;});React.useEffect(function(){var unsubscribe=navigation.addListener('state',function(e){setResult(selectorRef.current(e.data.state));});return unsubscribe;},[navigation]);return selector(navigation.getState());}","map":{"version":3,"names":["React","useNavigation","useNavigationState","selector","navigation","_React$useState","useState","getState","_React$useState2","_slicedToArray","setResult","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["C:\\Users\\ACER\\Desktop\\Nouveau dossier\\signal-clone\\node_modules\\@react-navigation\\core\\src\\useNavigationState.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"],"mappings":"iEACA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAG9B,MAAO,CAAAC,aAAa,uBAWpB,cAAe,SAAS,CAAAC,kBAAkBA,CACxCC,QAAgC,CAC7B,CACH,GAAM,CAAAC,UAAU,CAAGH,aAAa,EAA6B,CAI7D,IAAAI,eAAA,CAAsBL,KAAK,CAACM,QAAQ,CAAC,iBAAM,CAAAH,QAAQ,CAACC,UAAU,CAACG,QAAQ,EAAE,CAAC,GAAC,CAAAC,gBAAA,CAAAC,cAAA,CAAAJ,eAAA,IAAlEK,SAAS,CAAAF,gBAAA,IAGlB,GAAM,CAAAG,WAAW,CAAGX,KAAK,CAACY,MAAM,CAACT,QAAQ,CAAC,CAE1CH,KAAK,CAACa,SAAS,CAAC,UAAM,CACpBF,WAAW,CAACG,OAAO,CAAGX,QAAQ,CAChC,CAAC,CAAC,CAEFH,KAAK,CAACa,SAAS,CAAC,UAAM,CACpB,GAAM,CAAAE,WAAW,CAAGX,UAAU,CAACY,WAAW,CAAC,OAAO,CAAG,SAAAC,CAAC,CAAK,CACzDP,SAAS,CAACC,WAAW,CAACG,OAAO,CAACG,CAAC,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAC9C,CAAC,CAAC,CAEF,MAAO,CAAAJ,WAAW,CACpB,CAAC,CAAE,CAACX,UAAU,CAAC,CAAC,CAEhB,MAAO,CAAAD,QAAQ,CAACC,UAAU,CAACG,QAAQ,EAAE,CAAC,CACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}