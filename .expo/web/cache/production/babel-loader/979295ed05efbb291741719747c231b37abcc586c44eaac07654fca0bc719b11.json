{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import escape from'escape-string-regexp';import*as queryString from'query-string';import findFocusedRoute from\"./findFocusedRoute\";import validatePathConfig from\"./validatePathConfig\";export default function getStateFromPath(path,options){var _ref;if(options){validatePathConfig(options);}var initialRoutes=[];if(options!==null&&options!==void 0&&options.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}var screens=options===null||options===void 0?void 0:options.screens;var remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:remaining+\"/\";if(screens===undefined){var _routes=remaining.split('/').filter(Boolean).map(function(segment){var name=decodeURIComponent(segment);return{name:name};});if(_routes.length){return createNestedStateObject(path,_routes,initialRoutes);}return undefined;}var configs=(_ref=[]).concat.apply(_ref,_toConsumableArray(Object.keys(screens).map(function(key){return createNormalizedConfigs(key,screens,[],initialRoutes,[]);}))).sort(function(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}var aParts=a.pattern.split('/');var bParts=b.pattern.split('/');for(var i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}var aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');var bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});configs.reduce(function(acc,config){if(acc[config.pattern]){var a=acc[config.pattern].routeNames;var b=config.routeNames;var intersects=a.length>b.length?b.every(function(it,i){return a[i]===it;}):a.every(function(it,i){return b[i]===it;});if(!intersects){throw new Error(\"Found conflicting screens with the same pattern. The pattern '\"+config.pattern+\"' resolves to both '\"+a.join(' > ')+\"' and '\"+b.join(' > ')+\"'. Patterns must be unique and cannot resolve to more than one screen.\");}}return Object.assign(acc,_defineProperty({},config.pattern,config));},{});if(remaining==='/'){var match=configs.find(function(config){return config.path===''&&config.routeNames.every(function(name){var _configs$find;return!((_configs$find=configs.find(function(c){return c.screen===name;}))!==null&&_configs$find!==void 0&&_configs$find.path);});});if(match){return createNestedStateObject(path,match.routeNames.map(function(name){return{name:name};}),initialRoutes,configs);}return undefined;}var result;var current;var _matchAgainstConfigs=matchAgainstConfigs(remaining,configs.map(function(c){return _objectSpread(_objectSpread({},c),{},{regex:c.regex?new RegExp(c.regex.source+'$'):undefined});})),routes=_matchAgainstConfigs.routes,remainingPath=_matchAgainstConfigs.remainingPath;if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}var joinPaths=function joinPaths(){var _ref2;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref2=[]).concat.apply(_ref2,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var matchAgainstConfigs=function matchAgainstConfigs(remaining,configs){var routes;var remainingPath=remaining;var _loop=function _loop(){if(!config.regex){return\"continue\";}var match=remainingPath.match(config.regex);if(match){var matchedParams=(_config$pattern=config.pattern)===null||_config$pattern===void 0?void 0:_config$pattern.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p,i){return Object.assign(acc,_defineProperty({},p,match[(i+1)*2].replace(/\\//,'')));},{});routes=config.routeNames.map(function(name){var _config$path;var config=configs.find(function(c){return c.screen===name;});var params=config===null||config===void 0?void 0:(_config$path=config.path)===null||_config$path===void 0?void 0:_config$path.split('/').filter(function(p){return p.startsWith(':');}).reduce(function(acc,p){var value=matchedParams[p];if(value){var _config$parse;var key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=(_config$parse=config.parse)!==null&&_config$parse!==void 0&&_config$parse[key]?config.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name:name,params:params};}return{name:name};});remainingPath=remainingPath.replace(match[1],'');return\"break\";}};for(var config of configs){var _config$pattern;var _ret=_loop();if(_ret===\"continue\")continue;if(_ret===\"break\")break;}return{routes:routes,remainingPath:remainingPath};};var createNormalizedConfigs=function createNormalizedConfigs(screen,routeConfig){var routeNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var initials=arguments.length>3?arguments[3]:undefined;var parentScreens=arguments.length>4?arguments[4]:undefined;var parentPattern=arguments.length>5?arguments[5]:undefined;var configs=[];routeNames.push(screen);parentScreens.push(screen);var config=routeConfig[screen];if(typeof config==='string'){var pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){var _pattern;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}_pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,_pattern,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens:parentScreens});}Object.keys(config.screens).forEach(function(nestedConfig){var _pattern2;var result=createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,_toConsumableArray(parentScreens),(_pattern2=_pattern)!=null?_pattern2:parentPattern);configs.push.apply(configs,_toConsumableArray(result));});}}routeNames.pop();return configs;};var createConfigItem=function createConfigItem(screen,routeNames,pattern,path,parse){pattern=pattern.split('/').filter(Boolean).join('/');var regex=pattern?new RegExp(\"^(\"+pattern.split('/').map(function(it){if(it.startsWith(':')){return\"(([^/]+\\\\/)\"+(it.endsWith('?')?'?':'')+\")\";}return(it==='*'?'.*':escape(it))+\"\\\\/\";}).join('')+\")\"):undefined;return{screen:screen,regex:regex,pattern:pattern,path:path,routeNames:_toConsumableArray(routeNames),parse:parse};};var findParseConfigForRoute=function findParseConfigForRoute(routeName,flatConfig){for(var config of flatConfig){if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};var findInitialRoute=function findInitialRoute(routeName,parentScreens,initialRoutes){for(var config of initialRoutes){if(parentScreens.length===config.parentScreens.length){var sameParents=true;for(var i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};var createStateObject=function createStateObject(initialRoute,route,isEmpty){if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}else{return{routes:[_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}}};var createNestedStateObject=function createNestedStateObject(path,routes,initialRoutes,flatConfig){var state;var route=routes.shift();var parentScreens=[];var initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){var nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);var nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=findFocusedRoute(state);route.path=path;var params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=_objectSpread(_objectSpread({},route.params),params);}return state;};var parseQueryParams=function parseQueryParams(path,parseConfig){var query=path.split('?')[1];var params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(function(name){if(Object.hasOwnProperty.call(parseConfig,name)&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","_ref","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","apply","_toConsumableArray","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","_defineProperty","match","find","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","_objectSpread","regex","RegExp","source","remainingPath","joinPaths","_ref2","_len","arguments","paths","Array","_key","p","_loop","matchedParams","_config$pattern","_config$path","params","value","_config$parse","parse","_ret","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern2","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["C:\\Users\\ACER\\Desktop\\Nouveau dossier\\signal-clone\\node_modules\\@react-navigation\\core\\src\\getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}