{"ast":null,"code":"'use strict';import invariant from'fbjs/lib/invariant';export function elementsThatOverlapOffsets(offsets,itemCount,getFrameMetrics){var out=[];var outLength=0;for(var ii=0;ii<itemCount;ii++){var frame=getFrameMetrics(ii);var trailingOffset=frame.offset+frame.length;for(var kk=0;kk<offsets.length;kk++){if(out[kk]==null&&trailingOffset>=offsets[kk]){out[kk]=ii;outLength++;if(kk===offsets.length-1){invariant(outLength===offsets.length,'bad offsets input, should be in increasing order: %s',JSON.stringify(offsets));return out;}}}}return out;}export function newRangeCount(prev,next){return next.last-next.first+1-Math.max(0,1+Math.min(next.last,prev.last)-Math.max(next.first,prev.first));}export function computeWindowedRenderLimits(data,getItemCount,maxToRenderPerBatch,windowSize,prev,getFrameMetricsApprox,scrollMetrics){var itemCount=getItemCount(data);if(itemCount===0){return prev;}var offset=scrollMetrics.offset,velocity=scrollMetrics.velocity,visibleLength=scrollMetrics.visibleLength;var visibleBegin=Math.max(0,offset);var visibleEnd=visibleBegin+visibleLength;var overscanLength=(windowSize-1)*visibleLength;var leadFactor=0.5;var fillPreference=velocity>1?'after':velocity<-1?'before':'none';var overscanBegin=Math.max(0,visibleBegin-(1-leadFactor)*overscanLength);var overscanEnd=Math.max(0,visibleEnd+leadFactor*overscanLength);var lastItemOffset=getFrameMetricsApprox(itemCount-1).offset;if(lastItemOffset<overscanBegin){return{first:Math.max(0,itemCount-1-maxToRenderPerBatch),last:itemCount-1};}var _elementsThatOverlapO=elementsThatOverlapOffsets([overscanBegin,visibleBegin,visibleEnd,overscanEnd],itemCount,getFrameMetricsApprox),overscanFirst=_elementsThatOverlapO[0],first=_elementsThatOverlapO[1],last=_elementsThatOverlapO[2],overscanLast=_elementsThatOverlapO[3];overscanFirst=overscanFirst==null?0:overscanFirst;first=first==null?Math.max(0,overscanFirst):first;overscanLast=overscanLast==null?itemCount-1:overscanLast;last=last==null?Math.min(overscanLast,first+maxToRenderPerBatch-1):last;var visible={first:first,last:last};var newCellCount=newRangeCount(prev,visible);while(true){if(first<=overscanFirst&&last>=overscanLast){break;}var maxNewCells=newCellCount>=maxToRenderPerBatch;var firstWillAddMore=first<=prev.first||first>prev.last;var firstShouldIncrement=first>overscanFirst&&(!maxNewCells||!firstWillAddMore);var lastWillAddMore=last>=prev.last||last<prev.first;var lastShouldIncrement=last<overscanLast&&(!maxNewCells||!lastWillAddMore);if(maxNewCells&&!firstShouldIncrement&&!lastShouldIncrement){break;}if(firstShouldIncrement&&!(fillPreference==='after'&&lastShouldIncrement&&lastWillAddMore)){if(firstWillAddMore){newCellCount++;}first--;}if(lastShouldIncrement&&!(fillPreference==='before'&&firstShouldIncrement&&firstWillAddMore)){if(lastWillAddMore){newCellCount++;}last++;}}if(!(last>=first&&first>=0&&last<itemCount&&first>=overscanFirst&&last<=overscanLast&&first<=visible.first&&last>=visible.last)){throw new Error('Bad window calculation '+JSON.stringify({first:first,last:last,itemCount:itemCount,overscanFirst:overscanFirst,overscanLast:overscanLast,visible:visible}));}return{first:first,last:last};}export function keyExtractor(item,index){if(typeof item==='object'&&(item==null?void 0:item.key)!=null){return item.key;}if(typeof item==='object'&&(item==null?void 0:item.id)!=null){return item.id;}return String(index);}","map":{"version":3,"names":["invariant","elementsThatOverlapOffsets","offsets","itemCount","getFrameMetrics","out","outLength","ii","frame","trailingOffset","offset","length","kk","JSON","stringify","newRangeCount","prev","next","last","first","Math","max","min","computeWindowedRenderLimits","data","getItemCount","maxToRenderPerBatch","windowSize","getFrameMetricsApprox","scrollMetrics","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","_elementsThatOverlapO","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","keyExtractor","item","index","key","id","String"],"sources":["C:/Users/ACER/Desktop/Nouveau dossier/signal-clone/node_modules/react-native-web/dist/vendor/react-native/VirtualizeUtils/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\n\nexport function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {\n  var out = [];\n  var outLength = 0;\n\n  for (var ii = 0; ii < itemCount; ii++) {\n    var frame = getFrameMetrics(ii);\n    var trailingOffset = frame.offset + frame.length;\n\n    for (var kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n\n        if (kk === offsets.length - 1) {\n          invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));\n          return out;\n        }\n      }\n    }\n  }\n\n  return out;\n}\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\n\nexport function newRangeCount(prev, next) {\n  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n}\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\n\nexport function computeWindowedRenderLimits(data, getItemCount, maxToRenderPerBatch, windowSize, prev, getFrameMetricsApprox, scrollMetrics) {\n  var itemCount = getItemCount(data);\n\n  if (itemCount === 0) {\n    return prev;\n  }\n\n  var offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength; // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n\n  var visibleBegin = Math.max(0, offset);\n  var visibleEnd = visibleBegin + visibleLength;\n  var overscanLength = (windowSize - 1) * visibleLength; // Considering velocity seems to introduce more churn than it's worth.\n\n  var leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n  var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1\n    };\n  } // Find the indices that correspond to the items at the render boundaries we're targeting.\n\n\n  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], itemCount, getFrameMetricsApprox),\n      overscanFirst = _elementsThatOverlapO[0],\n      first = _elementsThatOverlapO[1],\n      last = _elementsThatOverlapO[2],\n      overscanLast = _elementsThatOverlapO[3];\n\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n  var visible = {\n    first,\n    last\n  }; // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n\n  var newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n\n    var maxNewCells = newCellCount >= maxToRenderPerBatch;\n    var firstWillAddMore = first <= prev.first || first > prev.last;\n    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    var lastWillAddMore = last >= prev.last || last < prev.first;\n    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n\n    if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n\n      first--;\n    }\n\n    if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n\n      last++;\n    }\n  }\n\n  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n    throw new Error('Bad window calculation ' + JSON.stringify({\n      first,\n      last,\n      itemCount,\n      overscanFirst,\n      overscanLast,\n      visible\n    }));\n  }\n\n  return {\n    first,\n    last\n  };\n}\nexport function keyExtractor(item, index) {\n  if (typeof item === 'object' && (item == null ? void 0 : item.key) != null) {\n    return item.key;\n  }\n\n  if (typeof item === 'object' && (item == null ? void 0 : item.id) != null) {\n    return item.id;\n  }\n\n  return String(index);\n}"],"mappings":"AASA,YAAY,CAEZ,MAAO,CAAAA,SAAS,KAAM,oBAAoB,CAO1C,MAAO,SAAS,CAAAC,0BAA0BA,CAACC,OAAO,CAAEC,SAAS,CAAEC,eAAe,CAAE,CAC9E,GAAI,CAAAC,GAAG,CAAG,EAAE,CACZ,GAAI,CAAAC,SAAS,CAAG,CAAC,CAEjB,IAAK,GAAI,CAAAC,EAAE,CAAG,CAAC,CAAEA,EAAE,CAAGJ,SAAS,CAAEI,EAAE,EAAE,CAAE,CACrC,GAAI,CAAAC,KAAK,CAAGJ,eAAe,CAACG,EAAE,CAAC,CAC/B,GAAI,CAAAE,cAAc,CAAGD,KAAK,CAACE,MAAM,CAAGF,KAAK,CAACG,MAAM,CAEhD,IAAK,GAAI,CAAAC,EAAE,CAAG,CAAC,CAAEA,EAAE,CAAGV,OAAO,CAACS,MAAM,CAAEC,EAAE,EAAE,CAAE,CAC1C,GAAIP,GAAG,CAACO,EAAE,CAAC,EAAI,IAAI,EAAIH,cAAc,EAAIP,OAAO,CAACU,EAAE,CAAC,CAAE,CACpDP,GAAG,CAACO,EAAE,CAAC,CAAGL,EAAE,CACZD,SAAS,EAAE,CAEX,GAAIM,EAAE,GAAKV,OAAO,CAACS,MAAM,CAAG,CAAC,CAAE,CAC7BX,SAAS,CAACM,SAAS,GAAKJ,OAAO,CAACS,MAAM,CAAE,sDAAsD,CAAEE,IAAI,CAACC,SAAS,CAACZ,OAAO,CAAC,CAAC,CACxH,MAAO,CAAAG,GAAG,CACZ,CACF,CACF,CACF,CAEA,MAAO,CAAAA,GAAG,CACZ,CAQA,MAAO,SAAS,CAAAU,aAAaA,CAACC,IAAI,CAAEC,IAAI,CAAE,CACxC,MAAO,CAAAA,IAAI,CAACC,IAAI,CAAGD,IAAI,CAACE,KAAK,CAAG,CAAC,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE,CAAC,CAAGD,IAAI,CAACE,GAAG,CAACL,IAAI,CAACC,IAAI,CAAEF,IAAI,CAACE,IAAI,CAAC,CAAGE,IAAI,CAACC,GAAG,CAACJ,IAAI,CAACE,KAAK,CAAEH,IAAI,CAACG,KAAK,CAAC,CAAC,CACxH,CAQA,MAAO,SAAS,CAAAI,2BAA2BA,CAACC,IAAI,CAAEC,YAAY,CAAEC,mBAAmB,CAAEC,UAAU,CAAEX,IAAI,CAAEY,qBAAqB,CAAEC,aAAa,CAAE,CAC3I,GAAI,CAAA1B,SAAS,CAAGsB,YAAY,CAACD,IAAI,CAAC,CAElC,GAAIrB,SAAS,GAAK,CAAC,CAAE,CACnB,MAAO,CAAAa,IAAI,CACb,CAEA,GAAI,CAAAN,MAAM,CAAGmB,aAAa,CAACnB,MAAM,CAC7BoB,QAAQ,CAAGD,aAAa,CAACC,QAAQ,CACjCC,aAAa,CAAGF,aAAa,CAACE,aAAa,CAI/C,GAAI,CAAAC,YAAY,CAAGZ,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEX,MAAM,CAAC,CACtC,GAAI,CAAAuB,UAAU,CAAGD,YAAY,CAAGD,aAAa,CAC7C,GAAI,CAAAG,cAAc,CAAG,CAACP,UAAU,CAAG,CAAC,EAAII,aAAa,CAErD,GAAI,CAAAI,UAAU,CAAG,GAAG,CAEpB,GAAI,CAAAC,cAAc,CAAGN,QAAQ,CAAG,CAAC,CAAG,OAAO,CAAGA,QAAQ,CAAG,CAAC,CAAC,CAAG,QAAQ,CAAG,MAAM,CAC/E,GAAI,CAAAO,aAAa,CAAGjB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEW,YAAY,CAAG,CAAC,CAAC,CAAGG,UAAU,EAAID,cAAc,CAAC,CACjF,GAAI,CAAAI,WAAW,CAAGlB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEY,UAAU,CAAGE,UAAU,CAAGD,cAAc,CAAC,CACvE,GAAI,CAAAK,cAAc,CAAGX,qBAAqB,CAACzB,SAAS,CAAG,CAAC,CAAC,CAACO,MAAM,CAEhE,GAAI6B,cAAc,CAAGF,aAAa,CAAE,CAElC,MAAO,CACLlB,KAAK,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAElB,SAAS,CAAG,CAAC,CAAGuB,mBAAmB,CAAC,CACvDR,IAAI,CAAEf,SAAS,CAAG,CACpB,CAAC,CACH,CAGA,GAAI,CAAAqC,qBAAqB,CAAGvC,0BAA0B,CAAC,CAACoC,aAAa,CAAEL,YAAY,CAAEC,UAAU,CAAEK,WAAW,CAAC,CAAEnC,SAAS,CAAEyB,qBAAqB,CAAC,CAC5Ia,aAAa,CAAGD,qBAAqB,CAAC,CAAC,CAAC,CACxCrB,KAAK,CAAGqB,qBAAqB,CAAC,CAAC,CAAC,CAChCtB,IAAI,CAAGsB,qBAAqB,CAAC,CAAC,CAAC,CAC/BE,YAAY,CAAGF,qBAAqB,CAAC,CAAC,CAAC,CAE3CC,aAAa,CAAGA,aAAa,EAAI,IAAI,CAAG,CAAC,CAAGA,aAAa,CACzDtB,KAAK,CAAGA,KAAK,EAAI,IAAI,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEoB,aAAa,CAAC,CAAGtB,KAAK,CAC1DuB,YAAY,CAAGA,YAAY,EAAI,IAAI,CAAGvC,SAAS,CAAG,CAAC,CAAGuC,YAAY,CAClExB,IAAI,CAAGA,IAAI,EAAI,IAAI,CAAGE,IAAI,CAACE,GAAG,CAACoB,YAAY,CAAEvB,KAAK,CAAGO,mBAAmB,CAAG,CAAC,CAAC,CAAGR,IAAI,CACpF,GAAI,CAAAyB,OAAO,CAAG,CACZxB,KAAK,CAALA,KAAK,CACLD,IAAI,CAAJA,IACF,CAAC,CAKD,GAAI,CAAA0B,YAAY,CAAG7B,aAAa,CAACC,IAAI,CAAE2B,OAAO,CAAC,CAE/C,MAAO,IAAI,CAAE,CACX,GAAIxB,KAAK,EAAIsB,aAAa,EAAIvB,IAAI,EAAIwB,YAAY,CAAE,CAElD,MACF,CAEA,GAAI,CAAAG,WAAW,CAAGD,YAAY,EAAIlB,mBAAmB,CACrD,GAAI,CAAAoB,gBAAgB,CAAG3B,KAAK,EAAIH,IAAI,CAACG,KAAK,EAAIA,KAAK,CAAGH,IAAI,CAACE,IAAI,CAC/D,GAAI,CAAA6B,oBAAoB,CAAG5B,KAAK,CAAGsB,aAAa,GAAK,CAACI,WAAW,EAAI,CAACC,gBAAgB,CAAC,CACvF,GAAI,CAAAE,eAAe,CAAG9B,IAAI,EAAIF,IAAI,CAACE,IAAI,EAAIA,IAAI,CAAGF,IAAI,CAACG,KAAK,CAC5D,GAAI,CAAA8B,mBAAmB,CAAG/B,IAAI,CAAGwB,YAAY,GAAK,CAACG,WAAW,EAAI,CAACG,eAAe,CAAC,CAEnF,GAAIH,WAAW,EAAI,CAACE,oBAAoB,EAAI,CAACE,mBAAmB,CAAE,CAKhE,MACF,CAEA,GAAIF,oBAAoB,EAAI,EAAEX,cAAc,GAAK,OAAO,EAAIa,mBAAmB,EAAID,eAAe,CAAC,CAAE,CACnG,GAAIF,gBAAgB,CAAE,CACpBF,YAAY,EAAE,CAChB,CAEAzB,KAAK,EAAE,CACT,CAEA,GAAI8B,mBAAmB,EAAI,EAAEb,cAAc,GAAK,QAAQ,EAAIW,oBAAoB,EAAID,gBAAgB,CAAC,CAAE,CACrG,GAAIE,eAAe,CAAE,CACnBJ,YAAY,EAAE,CAChB,CAEA1B,IAAI,EAAE,CACR,CACF,CAEA,GAAI,EAAEA,IAAI,EAAIC,KAAK,EAAIA,KAAK,EAAI,CAAC,EAAID,IAAI,CAAGf,SAAS,EAAIgB,KAAK,EAAIsB,aAAa,EAAIvB,IAAI,EAAIwB,YAAY,EAAIvB,KAAK,EAAIwB,OAAO,CAACxB,KAAK,EAAID,IAAI,EAAIyB,OAAO,CAACzB,IAAI,CAAC,CAAE,CAC1J,KAAM,IAAI,CAAAgC,KAAK,CAAC,yBAAyB,CAAGrC,IAAI,CAACC,SAAS,CAAC,CACzDK,KAAK,CAALA,KAAK,CACLD,IAAI,CAAJA,IAAI,CACJf,SAAS,CAATA,SAAS,CACTsC,aAAa,CAAbA,aAAa,CACbC,YAAY,CAAZA,YAAY,CACZC,OAAO,CAAPA,OACF,CAAC,CAAC,CAAC,CACL,CAEA,MAAO,CACLxB,KAAK,CAALA,KAAK,CACLD,IAAI,CAAJA,IACF,CAAC,CACH,CACA,MAAO,SAAS,CAAAiC,YAAYA,CAACC,IAAI,CAAEC,KAAK,CAAE,CACxC,GAAI,MAAO,CAAAD,IAAI,GAAK,QAAQ,EAAI,CAACA,IAAI,EAAI,IAAI,CAAG,IAAK,EAAC,CAAGA,IAAI,CAACE,GAAG,GAAK,IAAI,CAAE,CAC1E,MAAO,CAAAF,IAAI,CAACE,GAAG,CACjB,CAEA,GAAI,MAAO,CAAAF,IAAI,GAAK,QAAQ,EAAI,CAACA,IAAI,EAAI,IAAI,CAAG,IAAK,EAAC,CAAGA,IAAI,CAACG,EAAE,GAAK,IAAI,CAAE,CACzE,MAAO,CAAAH,IAAI,CAACG,EAAE,CAChB,CAEA,MAAO,CAAAC,MAAM,CAACH,KAAK,CAAC,CACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}