{"ast":null,"code":"'use strict';import InteractionManager from\"../../../exports/InteractionManager\";import TouchHistoryMath from\"../TouchHistoryMath\";var currentCentroidXOfTouchesChangedAfter=TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;var currentCentroidYOfTouchesChangedAfter=TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;var previousCentroidXOfTouchesChangedAfter=TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;var previousCentroidYOfTouchesChangedAfter=TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;var currentCentroidX=TouchHistoryMath.currentCentroidX;var currentCentroidY=TouchHistoryMath.currentCentroidY;var PanResponder={_initializeGestureState:function _initializeGestureState(gestureState){gestureState.moveX=0;gestureState.moveY=0;gestureState.x0=0;gestureState.y0=0;gestureState.dx=0;gestureState.dy=0;gestureState.vx=0;gestureState.vy=0;gestureState.numberActiveTouches=0;gestureState._accountsForMovesUpTo=0;},_updateGestureStateOnMove:function _updateGestureStateOnMove(gestureState,touchHistory){gestureState.numberActiveTouches=touchHistory.numberActiveTouches;gestureState.moveX=currentCentroidXOfTouchesChangedAfter(touchHistory,gestureState._accountsForMovesUpTo);gestureState.moveY=currentCentroidYOfTouchesChangedAfter(touchHistory,gestureState._accountsForMovesUpTo);var movedAfter=gestureState._accountsForMovesUpTo;var prevX=previousCentroidXOfTouchesChangedAfter(touchHistory,movedAfter);var x=currentCentroidXOfTouchesChangedAfter(touchHistory,movedAfter);var prevY=previousCentroidYOfTouchesChangedAfter(touchHistory,movedAfter);var y=currentCentroidYOfTouchesChangedAfter(touchHistory,movedAfter);var nextDX=gestureState.dx+(x-prevX);var nextDY=gestureState.dy+(y-prevY);var dt=touchHistory.mostRecentTimeStamp-gestureState._accountsForMovesUpTo;gestureState.vx=(nextDX-gestureState.dx)/dt;gestureState.vy=(nextDY-gestureState.dy)/dt;gestureState.dx=nextDX;gestureState.dy=nextDY;gestureState._accountsForMovesUpTo=touchHistory.mostRecentTimeStamp;},create:function create(config){var interactionState={handle:null,shouldCancelClick:false,timeout:null};var gestureState={stateID:Math.random(),moveX:0,moveY:0,x0:0,y0:0,dx:0,dy:0,vx:0,vy:0,numberActiveTouches:0,_accountsForMovesUpTo:0};var panHandlers={onStartShouldSetResponder:function onStartShouldSetResponder(event){return config.onStartShouldSetPanResponder==null?false:config.onStartShouldSetPanResponder(event,gestureState);},onMoveShouldSetResponder:function onMoveShouldSetResponder(event){return config.onMoveShouldSetPanResponder==null?false:config.onMoveShouldSetPanResponder(event,gestureState);},onStartShouldSetResponderCapture:function onStartShouldSetResponderCapture(event){if(event.nativeEvent.touches.length===1){PanResponder._initializeGestureState(gestureState);}gestureState.numberActiveTouches=event.touchHistory.numberActiveTouches;return config.onStartShouldSetPanResponderCapture!=null?config.onStartShouldSetPanResponderCapture(event,gestureState):false;},onMoveShouldSetResponderCapture:function onMoveShouldSetResponderCapture(event){var touchHistory=event.touchHistory;if(gestureState._accountsForMovesUpTo===touchHistory.mostRecentTimeStamp){return false;}PanResponder._updateGestureStateOnMove(gestureState,touchHistory);return config.onMoveShouldSetPanResponderCapture?config.onMoveShouldSetPanResponderCapture(event,gestureState):false;},onResponderGrant:function onResponderGrant(event){if(!interactionState.handle){interactionState.handle=InteractionManager.createInteractionHandle();}if(interactionState.timeout){clearInteractionTimeout(interactionState);}interactionState.shouldCancelClick=true;gestureState.x0=currentCentroidX(event.touchHistory);gestureState.y0=currentCentroidY(event.touchHistory);gestureState.dx=0;gestureState.dy=0;if(config.onPanResponderGrant){config.onPanResponderGrant(event,gestureState);}return config.onShouldBlockNativeResponder==null?true:config.onShouldBlockNativeResponder(event,gestureState);},onResponderReject:function onResponderReject(event){clearInteractionHandle(interactionState,config.onPanResponderReject,event,gestureState);},onResponderRelease:function onResponderRelease(event){clearInteractionHandle(interactionState,config.onPanResponderRelease,event,gestureState);setInteractionTimeout(interactionState);PanResponder._initializeGestureState(gestureState);},onResponderStart:function onResponderStart(event){var touchHistory=event.touchHistory;gestureState.numberActiveTouches=touchHistory.numberActiveTouches;if(config.onPanResponderStart){config.onPanResponderStart(event,gestureState);}},onResponderMove:function onResponderMove(event){var touchHistory=event.touchHistory;if(gestureState._accountsForMovesUpTo===touchHistory.mostRecentTimeStamp){return;}PanResponder._updateGestureStateOnMove(gestureState,touchHistory);if(config.onPanResponderMove){config.onPanResponderMove(event,gestureState);}},onResponderEnd:function onResponderEnd(event){var touchHistory=event.touchHistory;gestureState.numberActiveTouches=touchHistory.numberActiveTouches;clearInteractionHandle(interactionState,config.onPanResponderEnd,event,gestureState);},onResponderTerminate:function onResponderTerminate(event){clearInteractionHandle(interactionState,config.onPanResponderTerminate,event,gestureState);setInteractionTimeout(interactionState);PanResponder._initializeGestureState(gestureState);},onResponderTerminationRequest:function onResponderTerminationRequest(event){return config.onPanResponderTerminationRequest==null?true:config.onPanResponderTerminationRequest(event,gestureState);},onClickCapture:function onClickCapture(event){if(interactionState.shouldCancelClick===true){event.stopPropagation();event.preventDefault();}}};return{panHandlers:panHandlers,getInteractionHandle:function getInteractionHandle(){return interactionState.handle;}};}};function clearInteractionHandle(interactionState,callback,event,gestureState){if(interactionState.handle){InteractionManager.clearInteractionHandle(interactionState.handle);interactionState.handle=null;}if(callback){callback(event,gestureState);}}function clearInteractionTimeout(interactionState){clearTimeout(interactionState.timeout);}function setInteractionTimeout(interactionState){interactionState.timeout=setTimeout(function(){interactionState.shouldCancelClick=false;},250);}export default PanResponder;","map":{"version":3,"names":["InteractionManager","TouchHistoryMath","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","shouldCancelClick","timeout","stateID","Math","random","panHandlers","onStartShouldSetResponder","event","onStartShouldSetPanResponder","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","length","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","createInteractionHandle","clearInteractionTimeout","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","setInteractionTimeout","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","onClickCapture","stopPropagation","preventDefault","getInteractionHandle","callback","clearTimeout","setTimeout"],"sources":["C:/Users/ACER/Desktop/Nouveau dossier/signal-clone/node_modules/react-native-web/dist/vendor/react-native/PanResponder/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\nimport TouchHistoryMath from '../TouchHistoryMath';\nvar currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nvar currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nvar previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nvar previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nvar currentCentroidX = TouchHistoryMath.currentCentroidX;\nvar currentCentroidY = TouchHistoryMath.currentCentroidY;\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nvar PanResponder = {\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n  _initializeGestureState(gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0; // All `gestureState` accounts for timeStamps up until:\n\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove(gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    var movedAfter = gestureState._accountsForMovesUpTo;\n    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    var nextDX = gestureState.dx + (x - prevX);\n    var nextDY = gestureState.dy + (y - prevY); // TODO: This must be filtered intelligently.\n\n    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create(config) {\n    var interactionState = {\n      handle: null,\n      shouldCancelClick: false,\n      timeout: null\n    };\n    var gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n      moveX: 0,\n      moveY: 0,\n      x0: 0,\n      y0: 0,\n      dx: 0,\n      dy: 0,\n      vx: 0,\n      vy: 0,\n      numberActiveTouches: 0,\n      _accountsForMovesUpTo: 0\n    };\n    var panHandlers = {\n      onStartShouldSetResponder(event) {\n        return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n      },\n\n      onMoveShouldSetResponder(event) {\n        return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n      },\n\n      onStartShouldSetResponderCapture(event) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (event.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n\n        gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n\n      onMoveShouldSetResponderCapture(event) {\n        var touchHistory = event.touchHistory; // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n      },\n\n      onResponderGrant(event) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n\n        if (interactionState.timeout) {\n          clearInteractionTimeout(interactionState);\n        }\n\n        interactionState.shouldCancelClick = true;\n        gestureState.x0 = currentCentroidX(event.touchHistory);\n        gestureState.y0 = currentCentroidY(event.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(event, gestureState);\n        } // TODO: t7467124 investigate if this can be removed\n\n\n        return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n      },\n\n      onResponderReject(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n      },\n\n      onResponderRelease(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n        setInteractionTimeout(interactionState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderStart(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(event, gestureState);\n        }\n      },\n\n      onResponderMove(event) {\n        var touchHistory = event.touchHistory; // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        } // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n\n\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(event, gestureState);\n        }\n      },\n\n      onResponderEnd(event) {\n        var touchHistory = event.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n      },\n\n      onResponderTerminate(event) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n        setInteractionTimeout(interactionState);\n\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest(event) {\n        return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n      },\n\n      // We do not want to trigger 'click' activated gestures or native behaviors\n      // on any pan target that is under a mouse cursor when it is released.\n      // Browsers will natively cancel 'click' events on a target if a non-mouse\n      // active pointer moves.\n      onClickCapture: event => {\n        if (interactionState.shouldCancelClick === true) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      }\n    };\n    return {\n      panHandlers,\n\n      getInteractionHandle() {\n        return interactionState.handle;\n      }\n\n    };\n  }\n\n};\n\nfunction clearInteractionHandle(interactionState, callback, event, gestureState) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nfunction clearInteractionTimeout(interactionState) {\n  clearTimeout(interactionState.timeout);\n}\n\nfunction setInteractionTimeout(interactionState) {\n  interactionState.timeout = setTimeout(() => {\n    interactionState.shouldCancelClick = false;\n  }, 250);\n}\n\nexport default PanResponder;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}