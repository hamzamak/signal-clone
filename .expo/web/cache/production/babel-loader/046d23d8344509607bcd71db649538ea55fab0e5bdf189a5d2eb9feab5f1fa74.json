{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import{useState}from'react';import useNavigation from\"./useNavigation\";export default function useIsFocused(){var navigation=useNavigation();var _useState=useState(navigation.isFocused),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];var valueToReturn=navigation.isFocused();if(isFocused!==valueToReturn){setIsFocused(valueToReturn);}React.useEffect(function(){var unsubscribeFocus=navigation.addListener('focus',function(){return setIsFocused(true);});var unsubscribeBlur=navigation.addListener('blur',function(){return setIsFocused(false);});return function(){unsubscribeFocus();unsubscribeBlur();};},[navigation]);React.useDebugValue(valueToReturn);return valueToReturn;}","map":{"version":3,"names":["React","useState","useNavigation","useIsFocused","navigation","_useState","isFocused","_useState2","_slicedToArray","setIsFocused","valueToReturn","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"sources":["C:\\Users\\ACER\\Desktop\\Nouveau dossier\\signal-clone\\node_modules\\@react-navigation\\core\\src\\useIsFocused.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"],"mappings":"iEAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,OAASC,QAAQ,KAAQ,OAAO,CAEhC,MAAO,CAAAC,aAAa,uBAMpB,cAAe,SAAS,CAAAC,YAAYA,CAAA,CAAY,CAC9C,GAAM,CAAAC,UAAU,CAAGF,aAAa,EAAE,CAClC,IAAAG,SAAA,CAAkCJ,QAAQ,CAACG,UAAU,CAACE,SAAS,CAAC,CAAAC,UAAA,CAAAC,cAAA,CAAAH,SAAA,IAAzDC,SAAS,CAAAC,UAAA,IAAEE,YAAY,CAAAF,UAAA,IAE9B,GAAM,CAAAG,aAAa,CAAGN,UAAU,CAACE,SAAS,EAAE,CAE5C,GAAIA,SAAS,GAAKI,aAAa,CAAE,CAM/BD,YAAY,CAACC,aAAa,CAAC,CAC7B,CAEAV,KAAK,CAACW,SAAS,CAAC,UAAM,CACpB,GAAM,CAAAC,gBAAgB,CAAGR,UAAU,CAACS,WAAW,CAAC,OAAO,CAAE,iBACvD,CAAAJ,YAAY,CAAC,IAAI,CAAC,GACnB,CAED,GAAM,CAAAK,eAAe,CAAGV,UAAU,CAACS,WAAW,CAAC,MAAM,CAAE,iBACrD,CAAAJ,YAAY,CAAC,KAAK,CAAC,GACpB,CAED,MAAO,WAAM,CACXG,gBAAgB,EAAE,CAClBE,eAAe,EAAE,CACnB,CAAC,CACH,CAAC,CAAE,CAACV,UAAU,CAAC,CAAC,CAEhBJ,KAAK,CAACe,aAAa,CAACL,aAAa,CAAC,CAElC,MAAO,CAAAA,aAAa,CACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}