{"ast":null,"code":"'use strict';import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import invariant from'fbjs/lib/invariant';var EventSubscriptionVendor=function(){function EventSubscriptionVendor(){_classCallCheck(this,EventSubscriptionVendor);this._subscriptionsForType={};}_createClass(EventSubscriptionVendor,[{key:\"addSubscription\",value:function addSubscription(eventType,subscription){invariant(subscription.subscriber===this,'The subscriber of the subscription is incorrectly set.');if(!this._subscriptionsForType[eventType]){this._subscriptionsForType[eventType]=[];}var key=this._subscriptionsForType[eventType].length;this._subscriptionsForType[eventType].push(subscription);subscription.eventType=eventType;subscription.key=key;return subscription;}},{key:\"removeAllSubscriptions\",value:function removeAllSubscriptions(eventType){if(eventType==null){this._subscriptionsForType={};}else{delete this._subscriptionsForType[eventType];}}},{key:\"removeSubscription\",value:function removeSubscription(subscription){var eventType=subscription.eventType;var key=subscription.key;var subscriptionsForType=this._subscriptionsForType[eventType];if(subscriptionsForType){delete subscriptionsForType[key];}}},{key:\"getSubscriptionsForType\",value:function getSubscriptionsForType(eventType){return this._subscriptionsForType[eventType];}}]);return EventSubscriptionVendor;}();export default EventSubscriptionVendor;","map":{"version":3,"names":["_classCallCheck","_createClass","invariant","EventSubscriptionVendor","_subscriptionsForType","key","value","addSubscription","eventType","subscription","subscriber","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"sources":["C:/Users/ACER/Desktop/Nouveau dossier/signal-clone/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  constructor() {\n    this._subscriptionsForType = {};\n  }\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n\n  addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n\n  removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n\n  removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n\n\n  getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  }\n\n}\n\nexport default EventSubscriptionVendor;"],"mappings":"AASA,YAAY,CAAC,OAAAA,eAAA,oDAAAC,YAAA,0CAEb,MAAO,CAAAC,SAAS,KAAM,oBAAoB,CAAC,GAMrC,CAAAC,uBAAuB,YAC3B,SAAAA,wBAAA,CAAc,CAAAH,eAAA,MAAAG,uBAAA,EACZ,IAAI,CAACC,qBAAqB,CAAG,CAAC,CAAC,CACjC,CAACH,YAAA,CAAAE,uBAAA,GAAAE,GAAA,mBAAAC,KAAA,CASD,SAAAC,gBAAgBC,SAAS,CAAEC,YAAY,CAAE,CACvCP,SAAS,CAACO,YAAY,CAACC,UAAU,GAAK,IAAI,CAAE,wDAAwD,CAAC,CAErG,GAAI,CAAC,IAAI,CAACN,qBAAqB,CAACI,SAAS,CAAC,CAAE,CAC1C,IAAI,CAACJ,qBAAqB,CAACI,SAAS,CAAC,CAAG,EAAE,CAC5C,CAEA,GAAI,CAAAH,GAAG,CAAG,IAAI,CAACD,qBAAqB,CAACI,SAAS,CAAC,CAACG,MAAM,CAEtD,IAAI,CAACP,qBAAqB,CAACI,SAAS,CAAC,CAACI,IAAI,CAACH,YAAY,CAAC,CAExDA,YAAY,CAACD,SAAS,CAAGA,SAAS,CAClCC,YAAY,CAACJ,GAAG,CAAGA,GAAG,CACtB,MAAO,CAAAI,YAAY,CACrB,CAAC,GAAAJ,GAAA,0BAAAC,KAAA,CASD,SAAAO,uBAAuBL,SAAS,CAAE,CAChC,GAAIA,SAAS,EAAI,IAAI,CAAE,CACrB,IAAI,CAACJ,qBAAqB,CAAG,CAAC,CAAC,CACjC,CAAC,IAAM,CACL,MAAO,KAAI,CAACA,qBAAqB,CAACI,SAAS,CAAC,CAC9C,CACF,CAAC,GAAAH,GAAA,sBAAAC,KAAA,CASD,SAAAQ,mBAAmBL,YAAY,CAAE,CAC/B,GAAI,CAAAD,SAAS,CAAGC,YAAY,CAACD,SAAS,CACtC,GAAI,CAAAH,GAAG,CAAGI,YAAY,CAACJ,GAAG,CAC1B,GAAI,CAAAU,oBAAoB,CAAG,IAAI,CAACX,qBAAqB,CAACI,SAAS,CAAC,CAEhE,GAAIO,oBAAoB,CAAE,CACxB,MAAO,CAAAA,oBAAoB,CAACV,GAAG,CAAC,CAClC,CACF,CAAC,GAAAA,GAAA,2BAAAC,KAAA,CAeD,SAAAU,wBAAwBR,SAAS,CAAE,CACjC,MAAO,KAAI,CAACJ,qBAAqB,CAACI,SAAS,CAAC,CAC9C,CAAC,WAAAL,uBAAA,KAIH,cAAe,CAAAA,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}