{"ast":null,"code":"import{nanoid}from'nanoid/non-secure';export default function createMemoryHistory(){var index=0;var items=[];var pending=[];var interrupt=function interrupt(){pending.forEach(function(it){var cb=it.cb;it.cb=function(){return cb(true);};});};var history={get index(){var _window$history$state;var id=(_window$history$state=window.history.state)===null||_window$history$state===void 0?void 0:_window$history$state.id;if(id){var _index=items.findIndex(function(item){return item.id===id;});return _index>-1?_index:0;}return 0;},get:function get(index){return items[index];},backIndex:function backIndex(_ref){var path=_ref.path;for(var i=index-1;i>=0;i--){var item=items[i];if(item.path===path){return i;}}return-1;},push:function push(_ref2){var path=_ref2.path,state=_ref2.state;interrupt();var id=nanoid();items=items.slice(0,index+1);items.push({path:path,state:state,id:id});index=items.length-1;window.history.pushState({id:id},'',path);},replace:function replace(_ref3){var _ref4;var _window$history$state2;var path=_ref3.path,state=_ref3.state;interrupt();var id=(_ref4=(_window$history$state2=window.history.state)===null||_window$history$state2===void 0?void 0:_window$history$state2.id)!=null?_ref4:nanoid();var pathWithHash=path;if(!items.length||items.findIndex(function(item){return item.id===id;})<0){pathWithHash=pathWithHash+location.hash;items=[{path:pathWithHash,state:state,id:id}];index=0;}else{if(items[index].path===path){pathWithHash=pathWithHash+location.hash;}items[index]={path:path,state:state,id:id};}window.history.replaceState({id:id},'',pathWithHash);},go:function go(n){interrupt();var nextIndex=index+n;var lastItemIndex=items.length-1;if(n<0&&!items[nextIndex]){n=-index;index=0;}else if(n>0&&nextIndex>lastItemIndex){n=lastItemIndex-index;index=lastItemIndex;}else{index=nextIndex;}if(n===0){return;}return new Promise(function(resolve,reject){var done=function done(interrupted){clearTimeout(timer);if(interrupted){reject(new Error('History was changed during navigation.'));return;}var title=window.document.title;window.document.title='';window.document.title=title;resolve();};pending.push({ref:done,cb:done});var timer=setTimeout(function(){var index=pending.findIndex(function(it){return it.ref===done;});if(index>-1){pending[index].cb();pending.splice(index,1);}},100);var onPopState=function onPopState(){var _window$history$state3;var id=(_window$history$state3=window.history.state)===null||_window$history$state3===void 0?void 0:_window$history$state3.id;var currentIndex=items.findIndex(function(item){return item.id===id;});index=Math.max(currentIndex,0);var last=pending.pop();window.removeEventListener('popstate',onPopState);last===null||last===void 0?void 0:last.cb();};window.addEventListener('popstate',onPopState);window.history.go(n);});},listen:function listen(listener){var onPopState=function onPopState(){if(pending.length){return;}listener();};window.addEventListener('popstate',onPopState);return function(){return window.removeEventListener('popstate',onPopState);};}};return history;}","map":{"version":3,"names":["nanoid","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","_window$history$state","id","window","state","findIndex","item","get","backIndex","_ref","path","i","push","_ref2","slice","length","pushState","replace","_ref3","_ref4","_window$history$state2","pathWithHash","location","hash","replaceState","go","n","nextIndex","lastItemIndex","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","_window$history$state3","currentIndex","Math","max","last","pop","removeEventListener","addEventListener","listen","listener"],"sources":["C:\\Users\\ACER\\Desktop\\Nouveau dossier\\signal-clone\\node_modules\\@react-navigation\\native\\src\\createMemoryHistory.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      // Need to keep the hash part of the path if there was no previous history entry\n      // or the previous history entry had the same path\n      let pathWithHash = path;\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        pathWithHash = pathWithHash + location.hash;\n        items = [{ path: pathWithHash, state, id }];\n        index = 0;\n      } else {\n        if (items[index].path === path) {\n          pathWithHash = pathWithHash + location.hash;\n        }\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', pathWithHash);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}