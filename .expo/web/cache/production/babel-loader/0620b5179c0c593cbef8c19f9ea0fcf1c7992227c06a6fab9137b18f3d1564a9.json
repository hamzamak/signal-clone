{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var formatToList=function formatToList(items){return items.map(function(key){return\"- \"+key;}).join('\\n');};export default function validatePathConfig(config){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var validKeys=['initialRouteName','screens'];if(!root){validKeys.push('path','exact','stringify','parse');}var invalidKeys=Object.keys(config).filter(function(key){return!validKeys.includes(key);});if(invalidKeys.length){throw new Error(\"Found invalid properties in the configuration:\\n\"+formatToList(invalidKeys)+\"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\"+formatToList(validKeys)+\"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");}if(config.screens){Object.entries(config.screens).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),_=_ref2[0],value=_ref2[1];if(typeof value!=='string'){validatePathConfig(value,false);}});}}","map":{"version":3,"names":["formatToList","items","map","key","join","validatePathConfig","config","root","arguments","length","undefined","validKeys","push","invalidKeys","Object","keys","filter","includes","Error","screens","entries","forEach","_ref","_ref2","_slicedToArray","_","value"],"sources":["C:\\Users\\ACER\\Desktop\\Nouveau dossier\\signal-clone\\node_modules\\@react-navigation\\core\\src\\validatePathConfig.tsx"],"sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"],"mappings":"iEAAA,GAAM,CAAAA,YAAY,CAAI,QAAhB,CAAAA,YAAYA,CAAIC,KAAe,QACnC,CAAAA,KAAK,CAACC,GAAG,CAAE,SAAAC,GAAG,aAAUA,GAAI,EAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,GAE3C,cAAe,SAAS,CAAAC,kBAAkBA,CAACC,MAAW,CAAe,IAAb,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACjE,GAAM,CAAAG,SAAS,CAAG,CAAC,kBAAkB,CAAE,SAAS,CAAC,CAEjD,GAAI,CAACJ,IAAI,CAAE,CACTI,SAAS,CAACC,IAAI,CAAC,MAAM,CAAE,OAAO,CAAE,WAAW,CAAE,OAAO,CAAC,CACvD,CAEA,GAAM,CAAAC,WAAW,CAAGC,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACU,MAAM,CAC3C,SAAAb,GAAG,QAAK,CAACQ,SAAS,CAACM,QAAQ,CAACd,GAAG,CAAC,GAClC,CAED,GAAIU,WAAW,CAACJ,MAAM,CAAE,CACtB,KAAM,IAAI,CAAAS,KAAK,oDACsClB,YAAY,CAC7Da,WAAW,CACX,sHAAoHb,YAAY,CAChIW,SAAS,CACT,0HACH,CACH,CAEA,GAAIL,MAAM,CAACa,OAAO,CAAE,CAClBL,MAAM,CAACM,OAAO,CAACd,MAAM,CAACa,OAAO,CAAC,CAACE,OAAO,CAAC,SAAAC,IAAA,CAAgB,KAAAC,KAAA,CAAAC,cAAA,CAALF,IAAA,IAATG,CAAC,CAAAF,KAAA,IAAEG,KAAK,CAAAH,KAAA,IAC/C,GAAI,MAAO,CAAAG,KAAK,GAAK,QAAQ,CAAE,CAC7BrB,kBAAkB,CAACqB,KAAK,CAAE,KAAK,CAAC,CAClC,CACF,CAAC,CAAC,CACJ,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}